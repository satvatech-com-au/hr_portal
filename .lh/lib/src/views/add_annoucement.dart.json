{
    "sourceFile": "lib/src/views/add_annoucement.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1698670930594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698670958987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             const Spacer(\n               flex: 5,\n             ),\n             ElevatedButton(\n-              style: ElevatedButton.styleFrom(fixedSize: const Size(300, 60)),\n+              style: ElevatedButton.styleFrom(fixedSize: const Size(280, 60)),\n               onPressed: () {\n                 _addAnnouncement(\n                   titleController.text,\n                   descriptionController.text,\n"
                }
            ],
            "date": 1698670930594,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\n\nclass AddAnnouncementScreen extends StatefulWidget {\n  const AddAnnouncementScreen({Key? key}) : super(key: key);\n\n  @override\n  _AddAnnouncementScreenState createState() => _AddAnnouncementScreenState();\n}\n\nclass _AddAnnouncementScreenState extends State<AddAnnouncementScreen> {\n  final titleController = TextEditingController();\n  final descriptionController = TextEditingController();\n  DateTime? selectedDate;\n\n  Future<void> _selectDate(BuildContext context) async {\n    final DateTime picked = (await showDatePicker(\n      context: context,\n      initialDate: selectedDate ?? DateTime.now(),\n      firstDate: DateTime(2000),\n      lastDate: DateTime(2101),\n    ))!;\n\n    if (picked != selectedDate) {\n      setState(() {\n        selectedDate = picked;\n        dateController.text = \"${picked.year}-${picked.month}-${picked.day}\";\n      });\n    }\n  }\n\n  final dateController = TextEditingController();\n\n  void _addAnnouncement(String title, String description, DateTime date) {\n    setState(() {\n      announcements.add(\n          Announcement(title: title, description: description, date: date));\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Add New Announcement'),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n          children: <Widget>[\n            TextFormField(\n              controller: titleController,\n              decoration: const InputDecoration(\n                labelText: 'Title',\n                border: OutlineInputBorder(),\n              ),\n            ),\n            const SizedBox(height: 20),\n            TextFormField(\n              controller: dateController,\n              decoration: const InputDecoration(\n                labelText: 'Date (YYYY-MM-DD)',\n                border: OutlineInputBorder(),\n              ),\n              onTap: () => _selectDate(context),\n            ),\n            const SizedBox(height: 20),\n            TextFormField(\n              controller: descriptionController,\n              decoration: const InputDecoration(\n                hintText: 'Description',\n                border: OutlineInputBorder(),\n              ),\n              maxLines: 10,\n            ),\n            const Spacer(\n              flex: 5,\n            ),\n            ElevatedButton(\n              style: ElevatedButton.styleFrom(fixedSize: const Size(300, 60)),\n              onPressed: () {\n                _addAnnouncement(\n                  titleController.text,\n                  descriptionController.text,\n                  selectedDate ?? DateTime.now(),\n                );\n                Navigator.of(context).pop();\n              },\n              child: const Text('Add Announcement'),\n            ),\n            const Spacer(\n              flex: 1,\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass Announcement {\n  final String title;\n  final String description;\n  final DateTime date;\n\n  Announcement({\n    required this.title,\n    required this.description,\n    required this.date,\n  });\n}\n\nList<Announcement> announcements = [\n  Announcement(\n    title: 'Important Meeting',\n    description: 'There will be an important meeting next week.',\n    date: DateTime(2023, 10, 18),\n  ),\n  Announcement(\n    title: 'New Project Launch',\n    description: 'We are excited to announce the launch of our new project.',\n    date: DateTime(2023, 10, 19),\n  ),\n  Announcement(\n    title: 'Company Picnic',\n    description: 'Join us for a fun company picnic on Saturday!',\n    date: DateTime(2023, 10, 20),\n  ),\n  Announcement(\n    title: 'Training Session',\n    description:\n        'A training session on the latest software updates will be held.',\n    date: DateTime(2023, 10, 22),\n  ),\n  Announcement(\n    title: 'Employee of the Month',\n    description:\n        'We are proud to announce our Employee of the Month for September.',\n    date: DateTime(2023, 10, 24),\n  ),\n];\n"
        }
    ]
}